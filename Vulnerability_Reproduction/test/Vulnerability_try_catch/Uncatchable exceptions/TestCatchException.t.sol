// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {CatchException} from "../../../src/Vulnerability_try_catch/Uncatchable exceptions/CatchException.sol";
import {GenerateExceptions} from "../../../src/Vulnerability_try_catch/Uncatchable exceptions/GenerateExceptions.sol";

import {Test, console2} from "forge-std/Test.sol";

contract TestCatchException is Test {
    CatchException ce;
    GenerateExceptions ge;

    function setUp() external {
        ce = new CatchException();
        ge = new GenerateExceptions();
    }

    // cannot catch the exception
    // function test_catch_Instant_NonExistentAddress() external {
    //     uint256 size;
    //     address _ge = address(1);
    //     assembly {
    //         size := extcodesize(_ge)
    //     }
    //     assertEq(size, 0); // Make sure this is an address that does not implement instant_NonExistentAddress()
    //     ce.catch_Instant_NonExistentAddress(_ge);
    // }

    // // catch the exception
    // function test_catch_Instant_ExistentAddress() external {
    //     uint256 size;
    //     address self = address(this);
    //     assembly {
    //         size := extcodesize(self)
    //     }
    //     assertGt(size, 0); // Make sure the size of the address is not equal to zero
    //     ce.catch_Instant_NonExistentAddress(self);
    // }

    // // cannot catch the exception
    // function test_catch_ReturnDataNotMatchInterface1() external {
    //     ce.catch_ReturnDataNotMatchInterface1(address(ge));
    // }

    // function test_catch_ReturnDataNotMatchInterface2() external {
    //     ce.catch_ReturnDataNotMatchInterface2(address(ge));
    // }

    function test_catch_ReturnAddress() external {
        ce.catch_ReturnAddress(address(ge));
    }

    function test_catch_ReturnBool() external {
        ce.catch_ReturnBool(address(ge));
    }

    function test_catch_ReturnUint256() external {
        ce.catch_ReturnUint256(address(ge));
    }

    function test_catch_ReturnBytes32() external {
        ce.catch_ReturnBytes32(address(ge));
    }

    function test_catch_ReturnBytes() external {
        ce.catch_ReturnBytes(address(ge));
    }

    function test_catch_ReturnString() external {
        ce.catch_ReturnString(address(ge));
    }

    // function test_catch_OtherError() external {
    //     ce.catch_OtherErrors(address(ge));
    // }
}
